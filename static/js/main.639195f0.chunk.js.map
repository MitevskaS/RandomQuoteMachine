{"version":3,"sources":["../../random/src/resources/colors.js","../../random/src/App.js","../../random/src/serviceWorker.js","../../random/src/index.js"],"names":["resources_colors","colors","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateRandomQuote","setState","isLoading","fetch","then","response","json","data","index","Math","floor","random","catch","error","state","bind","assertThisInitialized","_this$state","link","quoteText","quoteAuthor","react_default","a","createElement","className","style","backgroundColor","color","App_Loader","id","marginRight","target","href","onClick","Component","Loader","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAYgBA,SAAA,CACfC,OAbc,CACd,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,aCLKC,qBAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAwFRQ,oBAAsB,WACpBP,EAAKQ,SAAS,CACZC,WAAW,IAGbC,MAAM,kCACLC,KAAK,SAAAC,GAAQ,OACZA,EAASC,SAEVF,KAAK,SAAAG,GAEJ,IAAIC,EAAQC,KAAKC,MAAsB,GAAhBD,KAAKE,UAE5BJ,EAAI,MAAYjB,EAAOA,OAAOkB,GAE9Bf,EAAKQ,SAAS,CACZM,KAAMA,EACNL,WAAW,MAGdU,MAAM,SAAAC,GAAK,OACVpB,EAAKQ,SAAS,CACZY,QACAX,WAAW,OA9GfT,EAAKqB,MAAQ,CAEXP,KAAM,GACNL,WAAW,EACXW,MAAO,MAETpB,EAAKO,oBAAsBP,EAAKO,oBAAoBe,KAAzBrB,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAAD,KARVA,oFAajBG,KAAKI,uDAGE,IAAAiB,EAC4BrB,KAAKkB,MAAhCP,EADDU,EACCV,KAAML,EADPe,EACOf,UAAWW,EADlBI,EACkBJ,MAEnBK,EAAO,yCAAyCX,EAAKY,UAAU,MAAMZ,EAAKa,YAEhF,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAU,MACVC,MAAO,CACLC,gBAAiBnB,EAAKoB,QAGtBzB,EACEmB,EAAAC,EAAAC,cAACK,EAAD,MAES,MAATf,EACEQ,EAAAC,EAAAC,cAAA,SAAIV,GAEJQ,EAAAC,EAAAC,cAAA,OACEM,GAAG,YACHL,UAAU,cACVC,MAAO,CACLE,MAAOpB,EAAKoB,QAEdN,EAAAC,EAAAC,cAAA,MACEM,GAAG,QACHR,EAAAC,EAAAC,cAAA,KACEC,UAAU,mBACVC,MAAO,CAACK,YAAa,MACtBvB,EAAKY,WAERE,EAAAC,EAAAC,cAAA,KACEM,GAAG,UADL,KAEKtB,EAAKa,aAEVC,EAAAC,EAAAC,cAAA,KACEM,GAAG,cACHL,UAAU,YACVC,MAAO,CAACC,gBAAiBnB,EAAKoB,OAC9BI,OAAO,SACPC,KAAMd,GACNG,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAGfH,EAAAC,EAAAC,cAAA,KACEC,UAAU,YACVQ,KAAK,yBACLD,OAAO,SACPN,MAAO,CAACC,gBAAiBnB,EAAKoB,QAC9BN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAEfH,EAAAC,EAAAC,cAAA,UACEM,GAAG,YACHL,UAAU,MACVC,MAAO,CAACC,gBAAiBnB,EAAKoB,OAC9BM,QAASrC,KAAKI,qBAJhB,cAWRqB,EAAAC,EAAAC,cAAA,QACEC,UAAU,WADZ,oHAhFUU,cAuIZC,mLAEF,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KACEC,UAAU,8CAEZH,EAAAC,EAAAC,cAAA,KACEC,UAAU,UADZ,mCAPaU,aAgBN3C,IChJK6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.639195f0.chunk.js","sourcesContent":["const colors = [\r\n\t\"#55efc4\",\r\n\t\"#ffeaa7\",\r\n\t\"#00cec9\",\r\n\t\"#ff7675\",\r\n\t\"#6c5ce7\",\r\n\t\"#e84393\",\r\n\t\"#d63031\",\r\n\t\"#00b894\",\r\n\t\"#a29bfe\",\r\n\t\"#fd79a8\",\r\n]\r\nexport default  {\r\n\tcolors: colors\r\n}\r\n","import React, { Component } from 'react';\nimport 'font-awesome/css/font-awesome.min.css';\nimport colors from './resources/colors';\nimport './style/App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // empty object where fetched data will be stored\n      data: {},\n      isLoading: false,\n      error: null\n    }\n    this.generateRandomQuote = this.generateRandomQuote.bind(this)\n  }\n\n  componentWillMount() {\n    // calling function generateRandomQuote\n    this.generateRandomQuote();\n  }\n\n  render() {\n    const { data, isLoading, error } = this.state;\n    // link for sharing quote text on twitter\n    const link = \"https://twitter.com/intent/tweet?text=\"+data.quoteText+\" - \"+data.quoteAuthor;\n\n    return (\n      <div \n        className=\"App\" \n        style={{\n          backgroundColor: data.color\n        }}>\n        {\n          isLoading ? (\n            <Loader/>\n          ):(\n            error != null ? (\n              <p>{error}</p>\n            ):( \n              <div \n                id=\"quote-box\"\n                className=\"App-wrapper\"\n                style={{\n                  color: data.color\n                }}>\n                <h2\n                  id=\"text\">\n                  <i \n                    className=\"fa fa-quote-left\"\n                    style={{marginRight: 10}}></i>\n                  {data.quoteText}\n                </h2>\n                <p\n                  id=\"author\">\n                  - {data.quoteAuthor}\n                </p>\n                <a\n                  id=\"tweet-quote\"\n                  className=\"btn share\"\n                  style={{backgroundColor: data.color}}\n                  target=\"_blank\"\n                  href={link}>\n                  <i className=\"fa fa-twitter\"></i>\n                </a>\n\n                <a\n                  className=\"btn share\"\n                  href=\"https://www.tumblr.com\"\n                  target=\"_blank\"\n                  style={{backgroundColor: data.color}}>\n                  <i className=\"fa fa-tumblr\"></i>\n                </a>\n                <button\n                  id=\"new-quote\"\n                  className=\"btn\"\n                  style={{backgroundColor: data.color}}\n                  onClick={this.generateRandomQuote}>\n                  New quote\n                </button>\n              </div>\n            )\n          )\n        }\n        <span\n          className=\"creator\">\n          by Mitevska\n        </span>\n        {/*<div \n          ref={el => (this.instance = el)} />*/}\n      </div>\n    );\n  }\n\n  // this function generates random quote\n  generateRandomQuote = () => {\n    this.setState({ \n      isLoading: true \n    });\n    // fetch random quote from API\n    fetch('https://quota.glitch.me/random')\n    .then(response => \n      response.json()\n    )\n    .then(data => {\n      // get random index number from 0-9 \n      var index = Math.floor(Math.random() * 10)\n      // add key color to the data object with value of the color from array of colors with the random index \n      data[\"color\"] = colors.colors[index];\n      // set fetched data to state\n      this.setState({\n        data: data,\n        isLoading: false \n      })\n    })\n    .catch(error => \n      this.setState({ \n        error, \n        isLoading: false \n      })\n    );\n  }\n\n  componentDidMount() {\n    // adding script tag to document\n    // const s = document.createElement('script');\n    // s.type = 'text/javascript';\n    // s.async = true;\n    // s.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n    // this.instance.appendChild(s);\n  }\n\n  componentWillUnmount() {\n\n  }\n\n}\n\n// stateless Loader component \nclass Loader extends Component {\n  render(){\n    return (\n      <div>\n        <i \n          className=\"fa fa-circle-o-notch fa-spin fa-lg loader\">\n        </i>\n        <p\n          className=\"loader\">\n          Loading ... Please wait\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}